name: Deploy

on:
  workflow_dispatch: {}
  release:
    types:
      - published

env:
  DOTNET_VERSION: "8.0.x"
  ARTIFACT_FOLDER: "artifacts"

jobs:
  deploy:
    name: NuGet Packages
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Clean Artifacts Folder
        run: |
          if (Test-Path '${{ env.ARTIFACT_FOLDER }}') {
            Remove-Item -Recurse -Force '${{ env.ARTIFACT_FOLDER }}'
          }
          New-Item -ItemType Directory -Force -Path '${{ env.ARTIFACT_FOLDER }}'
        shell: pwsh
        
      - name: Verify Project Structure
        run: |
          Write-Host "Current directory contents:"
          Get-ChildItem -Recurse -Name
          Write-Host "`nLooking for project files:"
          Get-ChildItem -Recurse -Filter "*.csproj" | Select-Object FullName
        shell: pwsh
        
      - name: Package ScikitLearn.Net
        env:
          PROJECT_FOLDER: "Source/ScikitLearn"
        run: |
          Write-Host "Checking if project folder exists..."
          if (-not (Test-Path '${{ env.PROJECT_FOLDER }}')) {
            throw "ERROR: Project folder '${{ env.PROJECT_FOLDER }}' does not exist"
          }

          Write-Host "Restoring packages..."
          dotnet restore '${{ env.PROJECT_FOLDER }}/ScikitLearn.csproj' --verbosity normal

          Write-Host "Building project..."
          dotnet build '${{ env.PROJECT_FOLDER }}/ScikitLearn.csproj' --configuration Release --no-restore --verbosity normal

          Write-Host "Creating package..."
          dotnet pack '${{ env.PROJECT_FOLDER }}/ScikitLearn.csproj' --configuration Release --no-build -o '${{ env.ARTIFACT_FOLDER }}' --verbosity normal

          Write-Host "Checking generated packages:"
          Get-ChildItem '${{ env.ARTIFACT_FOLDER }}' -Filter "*.nupkg" | Select-Object Name, Length
        shell: pwsh
        
      - name: Verify Packages Generated
        run: |
          $packages = Get-ChildItem '${{ env.ARTIFACT_FOLDER }}' -Filter "*.nupkg"
          if ($packages.Count -eq 0) {
            throw "ERROR: No .nupkg files were generated!"
          } else {
            Write-Host "Found $($packages.Count) package(s):"
            $packages | ForEach-Object { Write-Host "  - $($_.Name)" }
          }
        shell: pwsh
        
      - name: Deploy Packages to NuGet
        run: |
          $packages = Get-ChildItem '${{ env.ARTIFACT_FOLDER }}' -Filter "*.nupkg"
          foreach ($package in $packages) {
            Write-Host "Pushing package: $($package.Name)"
            dotnet nuget push $package.FullName `
              --api-key ${{ secrets.NUGET_API_KEY }} `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
          }
        shell: pwsh
